/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as FavoritesIndexImport } from './routes/favorites/index'
import { Route as ImageIdImport } from './routes/image/$id'
import { Route as AlbumIdImport } from './routes/album/$id'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const FavoritesIndexRoute = FavoritesIndexImport.update({
  id: '/favorites/',
  path: '/favorites/',
  getParentRoute: () => rootRoute,
} as any)

const ImageIdRoute = ImageIdImport.update({
  id: '/image/$id',
  path: '/image/$id',
  getParentRoute: () => rootRoute,
} as any)

const AlbumIdRoute = AlbumIdImport.update({
  id: '/album/$id',
  path: '/album/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/album/$id': {
      id: '/album/$id'
      path: '/album/$id'
      fullPath: '/album/$id'
      preLoaderRoute: typeof AlbumIdImport
      parentRoute: typeof rootRoute
    }
    '/image/$id': {
      id: '/image/$id'
      path: '/image/$id'
      fullPath: '/image/$id'
      preLoaderRoute: typeof ImageIdImport
      parentRoute: typeof rootRoute
    }
    '/favorites/': {
      id: '/favorites/'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof FavoritesIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/album/$id': typeof AlbumIdRoute
  '/image/$id': typeof ImageIdRoute
  '/favorites': typeof FavoritesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/album/$id': typeof AlbumIdRoute
  '/image/$id': typeof ImageIdRoute
  '/favorites': typeof FavoritesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/album/$id': typeof AlbumIdRoute
  '/image/$id': typeof ImageIdRoute
  '/favorites/': typeof FavoritesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/album/$id' | '/image/$id' | '/favorites'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/album/$id' | '/image/$id' | '/favorites'
  id: '__root__' | '/' | '/album/$id' | '/image/$id' | '/favorites/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AlbumIdRoute: typeof AlbumIdRoute
  ImageIdRoute: typeof ImageIdRoute
  FavoritesIndexRoute: typeof FavoritesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AlbumIdRoute: AlbumIdRoute,
  ImageIdRoute: ImageIdRoute,
  FavoritesIndexRoute: FavoritesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/album/$id",
        "/image/$id",
        "/favorites/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/album/$id": {
      "filePath": "album/$id.tsx"
    },
    "/image/$id": {
      "filePath": "image/$id.tsx"
    },
    "/favorites/": {
      "filePath": "favorites/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
